class Solution {
public:
    int incremovableSubarrayCount(vector<int>& nums) {
        int n = nums.size();  // Get the size of the array
        int count = 0;  // Initialize the count of incremovable subarrays

        // Iterate over all possible subarrays
        for (int i = 0; i < n; i++) {  // 'i' is the starting index of the subarray
            for (int j = i; j < n; j++) {  // 'j' is the ending index of the subarray
                bool isValid = true;  // We assume the subarray is valid initially
                int prev = 0;  // To store the last element before the subarray starts

                // Check if the elements before the subarray are strictly increasing
                for (int k = 0; k < i; k++) {
                    if (k > 0 && nums[k] <= nums[k - 1]) {  // If any pair is not increasing
                        isValid = false;  // Mark it as invalid
                        break;  // Exit the loop early
                    }
                    prev = nums[k];  // Keep track of the last valid element
                }

                // If valid so far, check the transition between the elements before and after the subarray
                if (isValid && i > 0 && j < n - 1 && nums[j + 1] <= prev) { 
                    // If the element after the subarray is not greater than the last valid element
                    isValid = false;  // Mark as invalid
                }

                // Check if the elements after the subarray are strictly increasing
                if (isValid) {
                    for (int k = j + 1; k < n; k++) {
                        if (k > j + 1 && nums[k] <= nums[k - 1]) {  // If any pair is not increasing
                            isValid = false;  // Mark it as invalid
                            break;  // Exit the loop early
                        }
                    }
                }

                // If the subarray is valid, increase the count
                if (isValid) 
                    count += 1;
            }
        }

        return count;  // Return the total count of incremovable subarrays
    }
};
